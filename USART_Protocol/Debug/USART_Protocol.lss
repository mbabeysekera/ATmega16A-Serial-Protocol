
USART_Protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e8  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f8  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 65 00 	call	0xca	; 0xca <main>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z5beginj>:
	}
}

void begin(unsigned int baudRate)
{
	unsigned int ubrrRegValue = (F_CPU / (8L * baudRate)) - 1L;
  6c:	a0 e0       	ldi	r26, 0x00	; 0
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	aa 1f       	adc	r26, r26
  76:	bb 1f       	adc	r27, r27
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	aa 1f       	adc	r26, r26
  7e:	bb 1f       	adc	r27, r27
  80:	9c 01       	movw	r18, r24
  82:	ad 01       	movw	r20, r26
  84:	22 0f       	add	r18, r18
  86:	33 1f       	adc	r19, r19
  88:	44 1f       	adc	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	74 e2       	ldi	r23, 0x24	; 36
  90:	84 ef       	ldi	r24, 0xF4	; 244
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 6e 00 	call	0xdc	; 0xdc <__divmodsi4>
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char) ubrrRegValue >> 8;
  9c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) ubrrRegValue;
  9e:	29 b9       	out	0x09, r18	; 9
	UCSRA |= (1 << U2X);
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8b b9       	out	0x0b, r24	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	88 61       	ori	r24, 0x18	; 24
  aa:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  ac:	80 b5       	in	r24, 0x20	; 32
  ae:	86 68       	ori	r24, 0x86	; 134
  b0:	80 bd       	out	0x20, r24	; 32
  b2:	08 95       	ret

000000b4 <_Z4waitv>:
}

void wait() 
{
	while(!(UCSRA & (1 << RXC)));
  b4:	5f 9b       	sbis	0x0b, 7	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <_Z4waitv>
}
  b8:	08 95       	ret

000000ba <_Z5writec>:

void write(char byte) {
	while(!(UCSRA & (1 << UDRE)));
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <_Z5writec>
	UDR = byte;
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <_Z4readv>:
}

char read() {
	wait();
  c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z4waitv>
	return UDR;
  c6:	8c b1       	in	r24, 0x0c	; 12
  c8:	08 95       	ret

000000ca <main>:
void write(char byte);
char read();

int main(void)
{
	begin(9600);
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	95 e2       	ldi	r25, 0x25	; 37
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <_Z5beginj>
	
	
	
	while (1)
	{
		char data = read();
  d2:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z4readv>
		write(data);
  d6:	0e 94 5d 00 	call	0xba	; 0xba <_Z5writec>
  da:	fb cf       	rjmp	.-10     	; 0xd2 <main+0x8>

000000dc <__divmodsi4>:
  dc:	05 2e       	mov	r0, r21
  de:	97 fb       	bst	r25, 7
  e0:	1e f4       	brtc	.+6      	; 0xe8 <__divmodsi4+0xc>
  e2:	00 94       	com	r0
  e4:	0e 94 85 00 	call	0x10a	; 0x10a <__negsi2>
  e8:	57 fd       	sbrc	r21, 7
  ea:	07 d0       	rcall	.+14     	; 0xfa <__divmodsi4_neg2>
  ec:	0e 94 8d 00 	call	0x11a	; 0x11a <__udivmodsi4>
  f0:	07 fc       	sbrc	r0, 7
  f2:	03 d0       	rcall	.+6      	; 0xfa <__divmodsi4_neg2>
  f4:	4e f4       	brtc	.+18     	; 0x108 <__divmodsi4_exit>
  f6:	0c 94 85 00 	jmp	0x10a	; 0x10a <__negsi2>

000000fa <__divmodsi4_neg2>:
  fa:	50 95       	com	r21
  fc:	40 95       	com	r20
  fe:	30 95       	com	r19
 100:	21 95       	neg	r18
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	4f 4f       	sbci	r20, 0xFF	; 255
 106:	5f 4f       	sbci	r21, 0xFF	; 255

00000108 <__divmodsi4_exit>:
 108:	08 95       	ret

0000010a <__negsi2>:
 10a:	90 95       	com	r25
 10c:	80 95       	com	r24
 10e:	70 95       	com	r23
 110:	61 95       	neg	r22
 112:	7f 4f       	sbci	r23, 0xFF	; 255
 114:	8f 4f       	sbci	r24, 0xFF	; 255
 116:	9f 4f       	sbci	r25, 0xFF	; 255
 118:	08 95       	ret

0000011a <__udivmodsi4>:
 11a:	a1 e2       	ldi	r26, 0x21	; 33
 11c:	1a 2e       	mov	r1, r26
 11e:	aa 1b       	sub	r26, r26
 120:	bb 1b       	sub	r27, r27
 122:	fd 01       	movw	r30, r26
 124:	0d c0       	rjmp	.+26     	; 0x140 <__udivmodsi4_ep>

00000126 <__udivmodsi4_loop>:
 126:	aa 1f       	adc	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	ee 1f       	adc	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	a2 17       	cp	r26, r18
 130:	b3 07       	cpc	r27, r19
 132:	e4 07       	cpc	r30, r20
 134:	f5 07       	cpc	r31, r21
 136:	20 f0       	brcs	.+8      	; 0x140 <__udivmodsi4_ep>
 138:	a2 1b       	sub	r26, r18
 13a:	b3 0b       	sbc	r27, r19
 13c:	e4 0b       	sbc	r30, r20
 13e:	f5 0b       	sbc	r31, r21

00000140 <__udivmodsi4_ep>:
 140:	66 1f       	adc	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	88 1f       	adc	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	1a 94       	dec	r1
 14a:	69 f7       	brne	.-38     	; 0x126 <__udivmodsi4_loop>
 14c:	60 95       	com	r22
 14e:	70 95       	com	r23
 150:	80 95       	com	r24
 152:	90 95       	com	r25
 154:	9b 01       	movw	r18, r22
 156:	ac 01       	movw	r20, r24
 158:	bd 01       	movw	r22, r26
 15a:	cf 01       	movw	r24, r30
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
