
USART_Protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e8  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f8  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003f  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 65 00 	call	0xca	; 0xca <main>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z5beginm>:
	}
}

void begin(unsigned long baudRate)
{
	unsigned int ubrrRegValue = (unsigned int)((F_CPU / (8L * baudRate)) - 1L); // calculate baud rate register value
  6c:	dc 01       	movw	r26, r24
  6e:	cb 01       	movw	r24, r22
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	aa 1f       	adc	r26, r26
  76:	bb 1f       	adc	r27, r27
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	aa 1f       	adc	r26, r26
  7e:	bb 1f       	adc	r27, r27
  80:	9c 01       	movw	r18, r24
  82:	ad 01       	movw	r20, r26
  84:	22 0f       	add	r18, r18
  86:	33 1f       	adc	r19, r19
  88:	44 1f       	adc	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	74 e2       	ldi	r23, 0x24	; 36
  90:	84 ef       	ldi	r24, 0xF4	; 244
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 70 00 	call	0xe0	; 0xe0 <__udivmodsi4>
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char) ubrrRegValue >> 8;
  9c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) ubrrRegValue;
  9e:	29 b9       	out	0x09, r18	; 9
	UCSRA |= (1 << U2X); // for 2x speed
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8b b9       	out	0x0b, r24	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN); // enable RX and TX
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	88 61       	ori	r24, 0x18	; 24
  aa:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); // No parity, One Stop Bit
  ac:	80 b5       	in	r24, 0x20	; 32
  ae:	86 68       	ori	r24, 0x86	; 134
  b0:	80 bd       	out	0x20, r24	; 32
  b2:	08 95       	ret

000000b4 <_Z4waitv>:
}

void wait() 
{
	while(!(UCSRA & (1 << RXC))); // wait until data received from other device
  b4:	5f 9b       	sbis	0x0b, 7	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <_Z4waitv>
}
  b8:	08 95       	ret

000000ba <_Z5writec>:

void write(char byte) {
	while(!(UCSRA & (1 << UDRE))); // wait until data sent to other device 
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <_Z5writec>
	UDR = byte; // then write new data to other device
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <_Z4readv>:
}

char read() {
	wait();
  c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z4waitv>
	return UDR; // read data from other devices
  c6:	8c b1       	in	r24, 0x0c	; 12
  c8:	08 95       	ret

000000ca <main>:
void write(char byte);
char read();

int main(void)
{
	begin(9600); // baud rate has been set to 9600
  ca:	60 e8       	ldi	r22, 0x80	; 128
  cc:	75 e2       	ldi	r23, 0x25	; 37
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z5beginm>
	while (1)
	{
		char data = read(); // read data(byte) from the PC
  d6:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z4readv>
		write(data); // write received byte to serial monitor (data visualizer)
  da:	0e 94 5d 00 	call	0xba	; 0xba <_Z5writec>
  de:	fb cf       	rjmp	.-10     	; 0xd6 <main+0xc>

000000e0 <__udivmodsi4>:
  e0:	a1 e2       	ldi	r26, 0x21	; 33
  e2:	1a 2e       	mov	r1, r26
  e4:	aa 1b       	sub	r26, r26
  e6:	bb 1b       	sub	r27, r27
  e8:	fd 01       	movw	r30, r26
  ea:	0d c0       	rjmp	.+26     	; 0x106 <__udivmodsi4_ep>

000000ec <__udivmodsi4_loop>:
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	ee 1f       	adc	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	a2 17       	cp	r26, r18
  f6:	b3 07       	cpc	r27, r19
  f8:	e4 07       	cpc	r30, r20
  fa:	f5 07       	cpc	r31, r21
  fc:	20 f0       	brcs	.+8      	; 0x106 <__udivmodsi4_ep>
  fe:	a2 1b       	sub	r26, r18
 100:	b3 0b       	sbc	r27, r19
 102:	e4 0b       	sbc	r30, r20
 104:	f5 0b       	sbc	r31, r21

00000106 <__udivmodsi4_ep>:
 106:	66 1f       	adc	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	88 1f       	adc	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	1a 94       	dec	r1
 110:	69 f7       	brne	.-38     	; 0xec <__udivmodsi4_loop>
 112:	60 95       	com	r22
 114:	70 95       	com	r23
 116:	80 95       	com	r24
 118:	90 95       	com	r25
 11a:	9b 01       	movw	r18, r22
 11c:	ac 01       	movw	r20, r24
 11e:	bd 01       	movw	r22, r26
 120:	cf 01       	movw	r24, r30
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
